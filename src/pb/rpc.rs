// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `rpc.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    service_name: ::protobuf::SingularField<::std::string::String>,
    method_name: ::protobuf::SingularField<::std::string::String>,
    request_proto: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    caller: ::protobuf::SingularField<::std::string::String>,
    headers: ::protobuf::RepeatedField<Header>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // required string service_name = 1;


    pub fn get_service_name(&self) -> &str {
        match self.service_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_service_name(&mut self) {
        self.service_name.clear();
    }

    pub fn has_service_name(&self) -> bool {
        self.service_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_name(&mut self, v: ::std::string::String) {
        self.service_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_name(&mut self) -> &mut ::std::string::String {
        if self.service_name.is_none() {
            self.service_name.set_default();
        }
        self.service_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_name(&mut self) -> ::std::string::String {
        self.service_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string method_name = 2;


    pub fn get_method_name(&self) -> &str {
        match self.method_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_method_name(&mut self) {
        self.method_name.clear();
    }

    pub fn has_method_name(&self) -> bool {
        self.method_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::string::String) {
        self.method_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::string::String {
        if self.method_name.is_none() {
            self.method_name.set_default();
        }
        self.method_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::string::String {
        self.method_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes request_proto = 3;


    pub fn get_request_proto(&self) -> &[u8] {
        match self.request_proto.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_request_proto(&mut self) {
        self.request_proto.clear();
    }

    pub fn has_request_proto(&self) -> bool {
        self.request_proto.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_proto(&mut self, v: ::std::vec::Vec<u8>) {
        self.request_proto = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_proto(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request_proto.is_none() {
            self.request_proto.set_default();
        }
        self.request_proto.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_proto(&mut self) -> ::std::vec::Vec<u8> {
        self.request_proto.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string caller = 4;


    pub fn get_caller(&self) -> &str {
        match self.caller.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_caller(&mut self) {
        self.caller.clear();
    }

    pub fn has_caller(&self) -> bool {
        self.caller.is_some()
    }

    // Param is passed by value, moved
    pub fn set_caller(&mut self, v: ::std::string::String) {
        self.caller = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_caller(&mut self) -> &mut ::std::string::String {
        if self.caller.is_none() {
            self.caller.set_default();
        }
        self.caller.as_mut().unwrap()
    }

    // Take field
    pub fn take_caller(&mut self) -> ::std::string::String {
        self.caller.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .protobuf.socketrpc.Header headers = 5;


    pub fn get_headers(&self) -> &[Header] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<Header>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<Header> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<Header> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        if self.service_name.is_none() {
            return false;
        }
        if self.method_name.is_none() {
            return false;
        }
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.service_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.method_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.request_proto)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.caller)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.method_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.request_proto.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.caller.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.method_name.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.request_proto.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.caller.as_ref() {
            os.write_string(4, &v)?;
        }
        for v in &self.headers {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "service_name",
                    |m: &Request| { &m.service_name },
                    |m: &mut Request| { &mut m.service_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "method_name",
                    |m: &Request| { &m.method_name },
                    |m: &mut Request| { &mut m.method_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "request_proto",
                    |m: &Request| { &m.request_proto },
                    |m: &mut Request| { &mut m.request_proto },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "caller",
                    |m: &Request| { &m.caller },
                    |m: &mut Request| { &mut m.caller },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                    "headers",
                    |m: &Request| { &m.headers },
                    |m: &mut Request| { &mut m.headers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.service_name.clear();
        self.method_name.clear();
        self.request_proto.clear();
        self.caller.clear();
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    response_proto: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    error: ::protobuf::SingularField<::std::string::String>,
    callback: ::std::option::Option<bool>,
    error_reason: ::std::option::Option<ErrorReason>,
    server: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // optional bytes response_proto = 1;


    pub fn get_response_proto(&self) -> &[u8] {
        match self.response_proto.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_response_proto(&mut self) {
        self.response_proto.clear();
    }

    pub fn has_response_proto(&self) -> bool {
        self.response_proto.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_proto(&mut self, v: ::std::vec::Vec<u8>) {
        self.response_proto = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_proto(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.response_proto.is_none() {
            self.response_proto.set_default();
        }
        self.response_proto.as_mut().unwrap()
    }

    // Take field
    pub fn take_response_proto(&mut self) -> ::std::vec::Vec<u8> {
        self.response_proto.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string error = 2;


    pub fn get_error(&self) -> &str {
        match self.error.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        self.error.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool callback = 3;


    pub fn get_callback(&self) -> bool {
        self.callback.unwrap_or(false)
    }
    pub fn clear_callback(&mut self) {
        self.callback = ::std::option::Option::None;
    }

    pub fn has_callback(&self) -> bool {
        self.callback.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callback(&mut self, v: bool) {
        self.callback = ::std::option::Option::Some(v);
    }

    // optional .protobuf.socketrpc.ErrorReason error_reason = 4;


    pub fn get_error_reason(&self) -> ErrorReason {
        self.error_reason.unwrap_or(ErrorReason::BAD_REQUEST_DATA)
    }
    pub fn clear_error_reason(&mut self) {
        self.error_reason = ::std::option::Option::None;
    }

    pub fn has_error_reason(&self) -> bool {
        self.error_reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_reason(&mut self, v: ErrorReason) {
        self.error_reason = ::std::option::Option::Some(v);
    }

    // optional string server = 5;


    pub fn get_server(&self) -> &str {
        match self.server.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_server(&mut self) {
        self.server.clear();
    }

    pub fn has_server(&self) -> bool {
        self.server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server(&mut self, v: ::std::string::String) {
        self.server = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server(&mut self) -> &mut ::std::string::String {
        if self.server.is_none() {
            self.server.set_default();
        }
        self.server.as_mut().unwrap()
    }

    // Take field
    pub fn take_server(&mut self) -> ::std::string::String {
        self.server.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.response_proto)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.error)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.callback = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.error_reason, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.server)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.response_proto.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.error.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.callback {
            my_size += 2;
        }
        if let Some(v) = self.error_reason {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(ref v) = self.server.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.response_proto.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.error.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.callback {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.error_reason {
            os.write_enum(4, v.value())?;
        }
        if let Some(ref v) = self.server.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "response_proto",
                    |m: &Response| { &m.response_proto },
                    |m: &mut Response| { &mut m.response_proto },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &Response| { &m.error },
                    |m: &mut Response| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "callback",
                    |m: &Response| { &m.callback },
                    |m: &mut Response| { &mut m.callback },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorReason>>(
                    "error_reason",
                    |m: &Response| { &m.error_reason },
                    |m: &mut Response| { &mut m.error_reason },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "server",
                    |m: &Response| { &m.server },
                    |m: &mut Response| { &mut m.server },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.response_proto.clear();
        self.error.clear();
        self.callback = ::std::option::Option::None;
        self.error_reason = ::std::option::Option::None;
        self.server.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // required string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 2;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Header| { &m.key },
                    |m: &mut Header| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Header| { &m.value },
                    |m: &mut Header| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Header>(
                    "Header",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Header {
        static mut instance: ::protobuf::lazy::Lazy<Header> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Header,
        };
        unsafe {
            instance.get(Header::new)
        }
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorReason {
    BAD_REQUEST_DATA = 0,
    BAD_REQUEST_PROTO = 1,
    SERVICE_NOT_FOUND = 2,
    METHOD_NOT_FOUND = 3,
    RPC_ERROR = 4,
    RPC_FAILED = 5,
    INVALID_REQUEST_PROTO = 6,
    BAD_RESPONSE_PROTO = 7,
    UNKNOWN_HOST = 8,
    IO_ERROR = 9,
}

impl ::protobuf::ProtobufEnum for ErrorReason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorReason> {
        match value {
            0 => ::std::option::Option::Some(ErrorReason::BAD_REQUEST_DATA),
            1 => ::std::option::Option::Some(ErrorReason::BAD_REQUEST_PROTO),
            2 => ::std::option::Option::Some(ErrorReason::SERVICE_NOT_FOUND),
            3 => ::std::option::Option::Some(ErrorReason::METHOD_NOT_FOUND),
            4 => ::std::option::Option::Some(ErrorReason::RPC_ERROR),
            5 => ::std::option::Option::Some(ErrorReason::RPC_FAILED),
            6 => ::std::option::Option::Some(ErrorReason::INVALID_REQUEST_PROTO),
            7 => ::std::option::Option::Some(ErrorReason::BAD_RESPONSE_PROTO),
            8 => ::std::option::Option::Some(ErrorReason::UNKNOWN_HOST),
            9 => ::std::option::Option::Some(ErrorReason::IO_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorReason] = &[
            ErrorReason::BAD_REQUEST_DATA,
            ErrorReason::BAD_REQUEST_PROTO,
            ErrorReason::SERVICE_NOT_FOUND,
            ErrorReason::METHOD_NOT_FOUND,
            ErrorReason::RPC_ERROR,
            ErrorReason::RPC_FAILED,
            ErrorReason::INVALID_REQUEST_PROTO,
            ErrorReason::BAD_RESPONSE_PROTO,
            ErrorReason::UNKNOWN_HOST,
            ErrorReason::IO_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ErrorReason", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ErrorReason {
}

impl ::std::default::Default for ErrorReason {
    fn default() -> Self {
        ErrorReason::BAD_REQUEST_DATA
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorReason {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\trpc.proto\x12\x12protobuf.socketrpc\"\xc0\x01\n\x07Request\x12!\n\
    \x0cservice_name\x18\x01\x20\x02(\tR\x0bserviceName\x12\x1f\n\x0bmethod_\
    name\x18\x02\x20\x02(\tR\nmethodName\x12#\n\rrequest_proto\x18\x03\x20\
    \x01(\x0cR\x0crequestProto\x12\x16\n\x06caller\x18\x04\x20\x01(\tR\x06ca\
    ller\x124\n\x07headers\x18\x05\x20\x03(\x0b2\x1a.protobuf.socketrpc.Head\
    erR\x07headers\"\xc6\x01\n\x08Response\x12%\n\x0eresponse_proto\x18\x01\
    \x20\x01(\x0cR\rresponseProto\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05\
    error\x12!\n\x08callback\x18\x03\x20\x01(\x08:\x05falseR\x08callback\x12\
    B\n\x0cerror_reason\x18\x04\x20\x01(\x0e2\x1f.protobuf.socketrpc.ErrorRe\
    asonR\x0berrorReason\x12\x16\n\x06server\x18\x05\x20\x01(\tR\x06server\"\
    0\n\x06Header\x12\x10\n\x03key\x18\x01\x20\x02(\tR\x03key\x12\x14\n\x05v\
    alue\x18\x02\x20\x01(\tR\x05value*\xd9\x01\n\x0bErrorReason\x12\x14\n\
    \x10BAD_REQUEST_DATA\x10\0\x12\x15\n\x11BAD_REQUEST_PROTO\x10\x01\x12\
    \x15\n\x11SERVICE_NOT_FOUND\x10\x02\x12\x14\n\x10METHOD_NOT_FOUND\x10\
    \x03\x12\r\n\tRPC_ERROR\x10\x04\x12\x0e\n\nRPC_FAILED\x10\x05\x12\x19\n\
    \x15INVALID_REQUEST_PROTO\x10\x06\x12\x16\n\x12BAD_RESPONSE_PROTO\x10\
    \x07\x12\x10\n\x0cUNKNOWN_HOST\x10\x08\x12\x0c\n\x08IO_ERROR\x10\t\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
